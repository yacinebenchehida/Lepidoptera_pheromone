#!/bin/bash
# Author: Yacine Ben Chehida

#SBATCH --time=0-1:30:00
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --mem=5G
#SBATCH --account=BIOL-SPECGEN-2018
#SBATCH --job-name=comb


#############
# Set paths #
#############
SCRIPT="/mnt/scratch/projects/biol-specgen-2018/yacine/Pheromones/Exonerate/Scripts"
RESULTS="/mnt/scratch/projects/biol-specgen-2018/yacine/Pheromones/Exonerate/Results/$1"
DB="/mnt/scratch/projects/biol-specgen-2018/yacine/Pheromones/Exonerate/Input/${2}/${2}_db"
#DB_nt_com="/mnt/scratch/projects/biol-specgen-2018/yacine/Pheromones/Exonerate/Input/${2}/nat_com_${2}_db"
DB_cluster="/mnt/scratch/projects/biol-specgen-2018/yacine/Pheromones/Exonerate/Input/${2}/cluster_db"
DATA="/mnt/scratch/projects/biol-specgen-2018/yacine/Pheromones/Blast/Inputs/$1"
FASTA_REF="${1}_genome.fa"
REF_GENOME="$DATA/$FASTA_REF"
echo $REF_GENOME

cd $RESULTS/$2
ls

###########################
# Merge exonerate results #
###########################
FILE1="${1}_${2}_combined_genes.fasta"

if [ -f "$FILE1" ]; then
    rm "$FILE1"
fi
touch "$FILE1"

for i in output_chunk_*; do
	cat $i/*_tmp_genes >> "$FILE1"
done

###################################
# Get overlapping exonerate genes #
###################################
grep ">" "$FILE1" | perl -pe 's/>//g'| awk -F "_" '{print $1"\t"$3"\t"$4}' > gene_position_to_plot.txt
module load Biopython/1.83-foss-2023a
python3 $SCRIPT/scaffold_size.py $REF_GENOME|awk '$3 > 1000000' > scaffold_size_information.txt
cp $SCRIPT/interval_parse.R ./
module purge
module load R/4.2.1-foss-2022a
Rscript ./interval_parse.R ${1}
rm interval_parse.R

###################################
# Ger overlapping exonerate genes #
###################################
module purge
module load BEDTools/2.31.0-GCC-12.3.0
bedtools getfasta -fi $REF_GENOME -bed annotation_merged.txt -fo unique_"$FILE1"
echo FASTA FILE WITH NON OVERLAPPING GENES GENERATED

#################################################
# Get coding region in the genes using augustus #
#################################################
module purge 
module load AUGUSTUS/3.5.0-foss-2022a
augustus --progress=true --strand=both --species=heliconius_melpomene1 unique_"$FILE1" > cds_"$FILE1".gff
#augustus --progress=true --strand=both --species=fly unique_"$FILE1" > cds_"$FILE1".gff
getAnnoFasta.pl cds_"$FILE1".gff
echo AUGUSTUS DONE

#################################################################
# Add the name of the species to the file generated by augustus #
#################################################################
cat cds_"$FILE1".aa | awk -v species="_${1}" '/^>/ {split($1, a, " "); print a[1] species; next} {print}' > unique_species_name_cds_"$FILE1"
echo SPECIES NAME ADDED

###############################################
# Blasting CDS to check they are real FAR/FAD #
###############################################
module load BLAST+/2.14.1-gompi-2023a
blastp -query unique_species_name_cds_"$FILE1" -db $DB -outfmt 6 -max_target_seqs 1 > raw_blast_results
blastp -query unique_species_name_cds_"$FILE1" -db $DB -outfmt 6 -max_target_seqs 1  -evalue 1e-10 > blast_results
blastp -query unique_species_name_cds_"$FILE1" -db $DB_cluster -outfmt 6 -max_target_seqs 1  -evalue 1e-10 > cluster_blast_results
echo BLASTP DONE

######################################
# Plot inferred genes in an ideogram #
######################################
module purge
module load R/4.2.1-foss-2022a
cat blast_results | awk '$12 > 80 {print $0}'| awk '$3 > 40 {print $1}'|sort -u > matches.txt
cat matches.txt | cut -f1 -d_ | cut -f1 -d"." | while read line; do     grep -P "$line$" cds_"$FILE1".gff; done | grep -P "\tgene\t" | awk 'BEGIN{OFS="\t"}
{
    split($1, a, /[:\-]/);
    scaffold = a[1];
    orig_start = a[2];
    orig_end = a[3];
    gene_start = $4;
    gene_len = $5;
    new_start = orig_start + gene_start - 1;
    new_end = orig_start + gene_len;
    gene = $9;
    print scaffold, new_start, new_end, gene
}' > genes_2_plot.txt

cp $SCRIPT/Plot_chromosome.R ./
Rscript ./Plot_chromosome.R ${1} genes_2_plot.txt
rm Plot_chromosome.R
echo GOOD GENE PLOTTED

###################################
# Ger overlapping exonerate genes #
###################################
module load BEDTools/2.31.0-GCC-12.3.0
bedtools getfasta -fi $REF_GENOME -bed genes_2_plot.txt -fo my_genes_sequences
module load BLAST+/2.14.1-gompi-2023a
blastx -query my_genes_sequences -db $DB_cluster -outfmt 6 -max_target_seqs 1  -evalue 1e-10 > Identified_function_gene_cluster

###################################
# Extract properly blasting genes #
###################################
module load Biopython/1.83-foss-2023a
awk 'NR==FNR {ids[$1]; next} /^>/ {header=$0; id=substr($1,2); keep=(id in ids)} keep' matches.txt  unique_species_name_cds_"$FILE1" > checked_unique_species_name_cds_"$FILE1"

#####################################################
# Remove genes that are much longer or much shorter #
#####################################################
cat checked_unique_species_name_cds_"$FILE1"|python3 $SCRIPT/filter_too_short_long_sequence.py -o aligned_"$FILE1"_filtered -s kept_sequences -r 0.2 -m 1.7
cat  aligned_"$FILE1"_filtered|grep ">"
cp aligned_"$FILE1"_filtered une_copie_de

####################################
# Add functional annotation header #
####################################
paste \
  <(cat aligned_"$FILE1"_filtered | grep ">" | sed 's/>//g' | while read line; do grep $line cluster_blast_results | head -n 1; done | cut -f 1) \
  <(cat aligned_"$FILE1"_filtered | grep ">" | sed 's/>//g' | while read line; do grep $line cluster_blast_results | head -n 1; done | awk '{print $2}' | while read line; do grep -P "$line " ../../../Input/${2}/${2}_functional_identification.txt | awk '{print $2}'; done) \
  <(cat aligned_"$FILE1"_filtered | grep ">" | sed 's/>//g' | while read line; do grep $line cluster_blast_results | head -n 1; done | cut -f 1 | cut -d "." -f 1 | while read line; do grep -P $line$ genes_2_plot.txt | awk '{print $1"\t"$2"\t"$3}'; done) \
> ID_protein.txt

awk 'BEGIN {
    while ((getline < "ID_protein.txt") > 0) {
        map[$1] = $2;
    }
}
{
    if ($0 ~ /^>/) {
        id = substr($0, 2);
        split(id, parts, /[.]/);
        split(id, species_parts, /_/);
        gene = parts[1];
        species = species_parts[2] "_" species_parts[3];
        if (id in map) {
            print ">" map[id] "_" gene "_" species;
            keep=1;
        } else {
            keep=0;
        }
    } else if (keep == 1) {
        print $0;
    }
}'  aligned_"$FILE1"_filtered > annotated_aligned_"$FILE1"_filtered

mv annotated_aligned_"$FILE1"_filtered checked_unique_species_name_cds_"$FILE1"
echo LIST OF GENE BLASTING TO THE DATABASE RETRIEVED

################################
# Multiple sequences alignment #
################################
module load MAFFT/7.505-GCC-11.3.0-with-extensions
mafft --maxiterate 1000 --localpair checked_unique_species_name_cds_"$FILE1" > aligned_unique_species_name_cds_"$FILE1"
module load Biopython/1.83-foss-2023a

##########################################################################
# Remove too short or too long sequences after alignment (based on gaps) #
##########################################################################
cat aligned_unique_species_name_cds_"$FILE1"|python3 $SCRIPT/filter_too_short_long_sequence_excluding_gaps.py -o aligned_"$FILE1"_filtered -s kept_sequences -r 0.2 -m 1.7
mv aligned_"$FILE1"_filtered aligned_unique_species_name_cds_"$FILE1"
echo MUSCLE ALIGNMENT DONE

###################
# Plot alignments #
###################
module purge
module load R/4.2.1-foss-2022a
export PATH=~/local/bin:$PATH
Rscript $SCRIPT/msa_plot.R aligned_unique_species_name_cds_"$FILE1" alignment_msa_${1}_${2}.html
echo MSA PLOT BEFORE TRIMAL GENERATED

# Trim sequence with trimal
module purge
module load trimAl/1.4.1-GCC-9.3.0

trimal -in aligned_unique_species_name_cds_"$FILE1" -gt 0.7 -cons 20 -out trimal  # -gt 0.7 more than 1-0.7=0.3 so removes sites with more than 30% of gaps. -cons 30  
echo TRIMAL DONE


module purge
module load R/4.2.1-foss-2022a
export PATH=~/local/bin:$PATH
Rscript $SCRIPT/msa_plot.R trimal trimal_alignment_msa_${1}_${2}.html
echo MSA PLOT AFTER TRIMAL GENERATED

# Keep unique sequences
module purge
module load Biopython/1.83-foss-2023a
python3 $SCRIPT/unique_sequence_1_pick.py trimal > unique_"$FILE1"


